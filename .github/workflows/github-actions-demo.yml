name: GitHub Actions Demo
run-name: Run Python fetch and get SSLError
on: [push]
jobs:
  check-cert:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    - run: openssl x509 -in root_cert.pem -text -noout
  Python-SSLError:
    runs-on: ubuntu-latest
    container:
      image: python:3.13-rc-alpine
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: ls root_cert.pem
      - run: echo "root_cert.pem was obtained by openssl s_client -connect www.google.com:443 -showcerts."
      - run: python -c "print(open('root_cert.pem').readline())"
      - run: python -c "import pip._vendor.requests; print(pip._vendor.requests.certs.where())"
      - run: cat $(python -c "import pip._vendor.requests; print(pip._vendor.requests.certs.where())") root_cert.pem > bundled.pem
      - run: export REQUESTS_CA_BUNDLE="${PWD}/bundled.pem"
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com', cert='$REQUESTS_CA_BUNDLE')" || echo "Explicitly passing the full bundle to cert fails."
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com', cert='${PWD}/root_cert.pem')" || echo "Explicitly passing one cert fails."
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com')" || echo "Using REQUESTS_CA_BUNDLE fails."
      - run: python -m pip install --break-system-packages urllib3
      - run: python -c "import urllib3; urllib3.PoolManager(ca_certs='root_cert.pem').request('GET', 'https://www.google.com')"
      - run: echo "üçè This job's status is ${{ job.status }}."
  Python-SSLError-otherimage:
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/pythonpackagesalpine/basic-python-packages-pre-installed-on-alpine:pip-alpine
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: ls root_cert.pem
      - run: echo "root_cert.pem was obtained by openssl s_client -connect www.google.com:443 -showcerts."
      - run: python -c "print(open('root_cert.pem').readline())"
      - run: python -c "import pip._vendor.requests; print(pip._vendor.requests.certs.where())"
      - run: cat $(python -c "import pip._vendor.requests; print(pip._vendor.requests.certs.where())") root_cert.pem > bundled.pem
      - run: export REQUESTS_CA_BUNDLE="${PWD}/bundled.pem"
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com', cert='$REQUESTS_CA_BUNDLE')" || echo "Explicitly passing the full bundle to cert fails."
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com', cert='${PWD}/root_cert.pem')" || echo "Explicitly passing one cert fails."
      - run: python -c "import pip._vendor.requests; pip._vendor.requests.get('https://www.google.com')" || echo "Using REQUESTS_CA_BUNDLE fails."
      - run: python -m pip install --break-system-packages urllib3
      - run: python -c "import urllib3; urllib3.PoolManager(ca_certs='root_cert.pem').request('GET', 'https://www.google.com')"
      - run: echo "üçè This job's status is ${{ job.status }}."
